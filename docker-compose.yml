version: '3.8'

services:
  # Neo4j Database
  neo4j:
    image: neo4j:5.13.0
    container_name: ehs-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password123  # Change in production
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2g
      - NEO4J_dbms_memory_pagecache_size=1g
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./input-documents:/var/lib/neo4j/input:ro  # Read-only access to input documents
    networks:
      - ehs-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Data Foundation Backend
  data-foundation-backend:
    build:
      context: ./data-foundation/backend
      dockerfile: Dockerfile
    container_name: ehs-data-foundation-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password123
      - ENV=development
      - PYTHONPATH=/code
      - LOG_LEVEL=INFO
      # Add any other environment variables from your .env files
    volumes:
      - ./input-documents:/code/input:ro  # Read-only access to input documents
      - app_data:/code/data  # Application data storage
      - backend_logs:/code/logs  # Backend logs
      - ./data-foundation/backend:/code:cached  # Source code for development
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - ehs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Data Foundation Frontend
  data-foundation-frontend:
    build:
      context: ./data-foundation/frontend
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_API_URL=http://localhost:8000
        - VITE_SKIP_AUTH=true
        - VITE_ENV=DEV
        - VITE_BATCH_SIZE=2
        - VITE_CHUNK_SIZE=5242880
        - VITE_TIME_PER_PAGE=50
        - VITE_LARGE_FILE_SIZE=5242880
        - VITE_CHUNK_OVERLAP=20
        - VITE_TOKENS_PER_CHUNK=200
        - VITE_CHUNK_TO_COMBINE=1
        - DEPLOYMENT_ENV=local
    container_name: ehs-data-foundation-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - data-foundation-backend
    networks:
      - ehs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # EHS Analytics Service
  ehs-analytics:
    build:
      context: ./ehs-analytics
      dockerfile: Dockerfile
    container_name: ehs-analytics-service
    restart: unless-stopped
    ports:
      - "8001:8000"  # Map to port 8001 to avoid conflict with data-foundation-backend
    environment:
      - PORT=8000
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password123
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
      - DATA_FOUNDATION_API_URL=http://data-foundation-backend:8000
      # Add API keys and other environment variables as needed
      # - OPENAI_API_KEY=your_openai_key_here
      # - ANTHROPIC_API_KEY=your_anthropic_key_here
    volumes:
      - ./input-documents:/app/input:ro  # Read-only access to input documents
      - app_data:/app/data  # Shared application data
      - analytics_logs:/app/logs  # Analytics service logs
      - ./ehs-analytics:/app:cached  # Source code for development
      - ./ehs-analytics/models:/app/models  # Model cache/storage
      - ./ehs-analytics/forecast_cache:/app/forecast_cache  # Forecast cache
    depends_on:
      neo4j:
        condition: service_healthy
      data-foundation-backend:
        condition: service_healthy
    networks:
      - ehs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

volumes:
  # Neo4j persistent storage
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/neo4j/data
  
  neo4j_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/neo4j/logs
  
  neo4j_import:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/neo4j/import
  
  neo4j_plugins:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/neo4j/plugins

  # Application data storage
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/app-data

  # Log storage
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/logs/backend
  
  analytics_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/logs/analytics

  # Input documents (bind mount for easy access)
  # This is defined in the volumes section for documentation but 
  # we use direct bind mounts in the services for better development experience

networks:
  ehs-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16