{
  "metadata": {
    "title": "EHS Data Extraction Report - QueryType.UTILITY_CONSUMPTION",
    "generated_at": "2025-08-18T21:07:01.243174",
    "query_type": "utility_consumption",
    "parameters": {},
    "output_format": "json"
  },
  "summary": {
    "total_queries": 2,
    "successful_queries": 1,
    "failed_queries": 1,
    "total_records": 0,
    "graph_objects": [
      {
        "nodes": [
          {
            "labels": [
              "Document",
              "Waterbill"
            ],
            "count": 2
          },
          {
            "labels": [
              "WaterBill"
            ],
            "count": 2
          },
          {
            "labels": [
              "Facility"
            ],
            "count": 3
          },
          {
            "labels": [
              "Customer"
            ],
            "count": 3
          },
          {
            "labels": [
              "UtilityProvider"
            ],
            "count": 3
          },
          {
            "labels": [
              "Meter"
            ],
            "count": 4
          },
          {
            "labels": [
              "Emission"
            ],
            "count": 3
          },
          {
            "labels": [
              "DocumentChunk"
            ],
            "count": 3
          },
          {
            "labels": [
              "__Node__",
              "Chunk"
            ],
            "count": 6
          },
          {
            "labels": [
              "__Node__",
              "__Entity__",
              "entity"
            ],
            "count": 19
          },
          {
            "labels": [
              "Document",
              "Utilitybill"
            ],
            "count": 1
          },
          {
            "labels": [
              "UtilityBill"
            ],
            "count": 1
          }
        ],
        "relationships": [
          {
            "type": "EXTRACTED_TO",
            "count": 3
          },
          {
            "type": "BILLED_TO",
            "count": 6
          },
          {
            "type": "BILLED_FOR",
            "count": 6
          },
          {
            "type": "PROVIDED_BY",
            "count": 4
          },
          {
            "type": "MONITORS",
            "count": 11
          },
          {
            "type": "RECORDED_IN",
            "count": 5
          },
          {
            "type": "RESULTED_IN",
            "count": 3
          },
          {
            "type": "MENTIONS",
            "count": 19
          },
          {
            "type": "Is",
            "count": 10
          },
          {
            "type": "SOURCE",
            "count": 3
          }
        ],
        "total_nodes": 50,
        "total_relationships": 70
      }
    ]
  },
  "queries_executed": [
    {
      "query": "\n                MATCH (d:Document:UtilityBill)-[:EXTRACTED_TO]->(b:UtilityBill)\n                RETURN d, b\n                ORDER BY b.billing_period_end DESC\n                ",
      "parameters": {}
    },
    {
      "query": "\n                MATCH (b:UtilityBill)\n                WHERE b.billing_period_start >= $start_date \n                  AND b.billing_period_end <= $end_date\n                RETURN SUM(b.total_kwh) as total_consumption,\n                       AVG(b.total_cost) as avg_cost,\n                       COUNT(b) as bill_count\n                ",
      "parameters": {}
    }
  ],
  "query_results": [
    {
      "query": "\n                MATCH (d:Document:UtilityBill)-[:EXTRACTED_TO]->(b:UtilityBill)\n                RETURN d, b\n                ORDER BY b.billing_period_end DESC\n                ",
      "parameters": {},
      "results": [],
      "record_count": 0,
      "status": "success"
    },
    {
      "query": "\n                MATCH (b:UtilityBill)\n                WHERE b.billing_period_start >= $start_date \n                  AND b.billing_period_end <= $end_date\n                RETURN SUM(b.total_kwh) as total_consumption,\n                       AVG(b.total_cost) as avg_cost,\n                       COUNT(b) as bill_count\n                ",
      "parameters": {},
      "error": "{code: Neo.ClientError.Statement.ParameterMissing} {message: Expected parameter(s): start_date, end_date}",
      "status": "failed"
    }
  ],
  "analysis": {
    "Key Findings": {
      "1": "Two queries were executed, one was successful and the other failed.",
      "2": "The successful query was intended to retrieve utility bill documents and their corresponding utility bills, but it returned no records.",
      "3": "The failed query was intended to calculate the total consumption, average cost, and bill count for a specified billing period. The failure was due to missing parameters: start_date and end_date."
    },
    "Patterns or Trends": {
      "1": "There is a lack of data in the successful query, suggesting that there may be no utility bills in the database or the query may not be correctly formulated.",
      "2": "The failed query indicates a recurring issue with missing parameters, which could suggest a problem with the way queries are being formulated or executed."
    },
    "Potential Data Quality Issues": {
      "1": "The successful query returned no records, which could indicate a lack of data or a problem with the query itself.",
      "2": "The failed query indicates that required parameters (start_date and end_date) were not provided, which could lead to inaccurate results or failures in data retrieval."
    },
    "Recommendations": {
      "1": "Investigate why the successful query returned no records. This could involve checking the database for the presence of utility bills or reviewing the query to ensure it is correctly formulated.",
      "2": "Ensure that all required parameters are provided when executing queries. In the case of the failed query, this would involve providing a start_date and end_date.",
      "3": "Consider implementing error handling or validation checks to prevent queries from being executed without the required parameters."
    }
  },
  "errors": []
}